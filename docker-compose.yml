version: "3"

services:
  healthchecker:
    image: hello-world
    depends_on:
      elasticsearch:
        condition: service_healthy
      logstash:
        condition: service_healthy
      kibana:
        condition: service_healthy
      postgres:
        condition: service_healthy
      server:
        condition: service_healthy

  postgres:
    image: postgres:14
    restart: unless-stopped
    hostname: "${POSTGRES_HOST}"
    env_file: .env
    ports:
      - 5432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 10s
      retries: 120

  server:
    build:
      context: .
    hostname: server
    env_file: .env
    ports:
      - 8080:8080
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:8080 | grep -q 'HTTP/1.1 404 Not Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  elasticsearch:
    image: elasticsearch:8.4.0
    ports:
      - 9200:9200
    volumes:
      - esdata:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 512m
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:9200 | grep -q 'HTTP/1.1 200 OK'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  logstash:
    build:
      context: logstash
    env_file: .env
    volumes:
      - ./logstash/config/pipelines.yml:/usr/share/logstash/config/pipelines.yml
      - ./logstash/pipeline/:/usr/share/logstash/pipeline/
      - ./logstash/queries/:/usr/share/logstash/config/queries/
      - logstashdata:/usr/share/logstash/data
    mem_limit: 512m
    depends_on:
      elasticsearch:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:9600 | grep -q 'HTTP/1.1 200 OK'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    image: kibana:8.4.0
    ports:
      - 5601:5601
    mem_limit: 512m
    volumes:
      - kibanadata:/usr/share/kibana/data
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

volumes:
  pgdata:
    driver: local
  esdata:
    driver: local
  logstashdata:
    driver: local
  kibanadata:
    driver: local
