// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PostsAudit is an object representing the database table.
type PostsAudit struct {
	ID            int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title         string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Body          string    `boil:"body" json:"body" toml:"body" yaml:"body"`
	UserID        int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ContributedAt time.Time `boil:"contributed_at" json:"contributed_at" toml:"contributed_at" yaml:"contributed_at"`
	Deleted       bool      `boil:"deleted" json:"deleted" toml:"deleted" yaml:"deleted"`

	R *postsAuditR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L postsAuditL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PostsAuditColumns = struct {
	ID            string
	Title         string
	Body          string
	UserID        string
	ContributedAt string
	Deleted       string
}{
	ID:            "id",
	Title:         "title",
	Body:          "body",
	UserID:        "user_id",
	ContributedAt: "contributed_at",
	Deleted:       "deleted",
}

var PostsAuditTableColumns = struct {
	ID            string
	Title         string
	Body          string
	UserID        string
	ContributedAt string
	Deleted       string
}{
	ID:            "posts_audit.id",
	Title:         "posts_audit.title",
	Body:          "posts_audit.body",
	UserID:        "posts_audit.user_id",
	ContributedAt: "posts_audit.contributed_at",
	Deleted:       "posts_audit.deleted",
}

// Generated where

var PostsAuditWhere = struct {
	ID            whereHelperint
	Title         whereHelperstring
	Body          whereHelperstring
	UserID        whereHelperint
	ContributedAt whereHelpertime_Time
	Deleted       whereHelperbool
}{
	ID:            whereHelperint{field: "\"posts_audit\".\"id\""},
	Title:         whereHelperstring{field: "\"posts_audit\".\"title\""},
	Body:          whereHelperstring{field: "\"posts_audit\".\"body\""},
	UserID:        whereHelperint{field: "\"posts_audit\".\"user_id\""},
	ContributedAt: whereHelpertime_Time{field: "\"posts_audit\".\"contributed_at\""},
	Deleted:       whereHelperbool{field: "\"posts_audit\".\"deleted\""},
}

// PostsAuditRels is where relationship names are stored.
var PostsAuditRels = struct {
}{}

// postsAuditR is where relationships are stored.
type postsAuditR struct {
}

// NewStruct creates a new relationship struct
func (*postsAuditR) NewStruct() *postsAuditR {
	return &postsAuditR{}
}

// postsAuditL is where Load methods for each relationship are stored.
type postsAuditL struct{}

var (
	postsAuditAllColumns            = []string{"id", "title", "body", "user_id", "contributed_at", "deleted"}
	postsAuditColumnsWithoutDefault = []string{"id", "title", "body", "user_id", "contributed_at", "deleted"}
	postsAuditColumnsWithDefault    = []string{}
	postsAuditPrimaryKeyColumns     = []string{"id", "user_id", "contributed_at"}
	postsAuditGeneratedColumns      = []string{}
)

type (
	// PostsAuditSlice is an alias for a slice of pointers to PostsAudit.
	// This should almost always be used instead of []PostsAudit.
	PostsAuditSlice []*PostsAudit
	// PostsAuditHook is the signature for custom PostsAudit hook methods
	PostsAuditHook func(context.Context, boil.ContextExecutor, *PostsAudit) error

	postsAuditQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	postsAuditType                 = reflect.TypeOf(&PostsAudit{})
	postsAuditMapping              = queries.MakeStructMapping(postsAuditType)
	postsAuditPrimaryKeyMapping, _ = queries.BindMapping(postsAuditType, postsAuditMapping, postsAuditPrimaryKeyColumns)
	postsAuditInsertCacheMut       sync.RWMutex
	postsAuditInsertCache          = make(map[string]insertCache)
	postsAuditUpdateCacheMut       sync.RWMutex
	postsAuditUpdateCache          = make(map[string]updateCache)
	postsAuditUpsertCacheMut       sync.RWMutex
	postsAuditUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var postsAuditAfterSelectHooks []PostsAuditHook

var postsAuditBeforeInsertHooks []PostsAuditHook
var postsAuditAfterInsertHooks []PostsAuditHook

var postsAuditBeforeUpdateHooks []PostsAuditHook
var postsAuditAfterUpdateHooks []PostsAuditHook

var postsAuditBeforeDeleteHooks []PostsAuditHook
var postsAuditAfterDeleteHooks []PostsAuditHook

var postsAuditBeforeUpsertHooks []PostsAuditHook
var postsAuditAfterUpsertHooks []PostsAuditHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PostsAudit) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postsAuditAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PostsAudit) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postsAuditBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PostsAudit) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postsAuditAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PostsAudit) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postsAuditBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PostsAudit) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postsAuditAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PostsAudit) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postsAuditBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PostsAudit) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postsAuditAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PostsAudit) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postsAuditBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PostsAudit) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postsAuditAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPostsAuditHook registers your hook function for all future operations.
func AddPostsAuditHook(hookPoint boil.HookPoint, postsAuditHook PostsAuditHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		postsAuditAfterSelectHooks = append(postsAuditAfterSelectHooks, postsAuditHook)
	case boil.BeforeInsertHook:
		postsAuditBeforeInsertHooks = append(postsAuditBeforeInsertHooks, postsAuditHook)
	case boil.AfterInsertHook:
		postsAuditAfterInsertHooks = append(postsAuditAfterInsertHooks, postsAuditHook)
	case boil.BeforeUpdateHook:
		postsAuditBeforeUpdateHooks = append(postsAuditBeforeUpdateHooks, postsAuditHook)
	case boil.AfterUpdateHook:
		postsAuditAfterUpdateHooks = append(postsAuditAfterUpdateHooks, postsAuditHook)
	case boil.BeforeDeleteHook:
		postsAuditBeforeDeleteHooks = append(postsAuditBeforeDeleteHooks, postsAuditHook)
	case boil.AfterDeleteHook:
		postsAuditAfterDeleteHooks = append(postsAuditAfterDeleteHooks, postsAuditHook)
	case boil.BeforeUpsertHook:
		postsAuditBeforeUpsertHooks = append(postsAuditBeforeUpsertHooks, postsAuditHook)
	case boil.AfterUpsertHook:
		postsAuditAfterUpsertHooks = append(postsAuditAfterUpsertHooks, postsAuditHook)
	}
}

// One returns a single postsAudit record from the query.
func (q postsAuditQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PostsAudit, error) {
	o := &PostsAudit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for posts_audit")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PostsAudit records from the query.
func (q postsAuditQuery) All(ctx context.Context, exec boil.ContextExecutor) (PostsAuditSlice, error) {
	var o []*PostsAudit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PostsAudit slice")
	}

	if len(postsAuditAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PostsAudit records in the query.
func (q postsAuditQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count posts_audit rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q postsAuditQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if posts_audit exists")
	}

	return count > 0, nil
}

// PostsAudits retrieves all the records using an executor.
func PostsAudits(mods ...qm.QueryMod) postsAuditQuery {
	mods = append(mods, qm.From("\"posts_audit\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"posts_audit\".*"})
	}

	return postsAuditQuery{q}
}

// FindPostsAudit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPostsAudit(ctx context.Context, exec boil.ContextExecutor, iD int, userID int, contributedAt time.Time, selectCols ...string) (*PostsAudit, error) {
	postsAuditObj := &PostsAudit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"posts_audit\" where \"id\"=$1 AND \"user_id\"=$2 AND \"contributed_at\"=$3", sel,
	)

	q := queries.Raw(query, iD, userID, contributedAt)

	err := q.Bind(ctx, exec, postsAuditObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from posts_audit")
	}

	if err = postsAuditObj.doAfterSelectHooks(ctx, exec); err != nil {
		return postsAuditObj, err
	}

	return postsAuditObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PostsAudit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no posts_audit provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postsAuditColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	postsAuditInsertCacheMut.RLock()
	cache, cached := postsAuditInsertCache[key]
	postsAuditInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			postsAuditAllColumns,
			postsAuditColumnsWithDefault,
			postsAuditColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(postsAuditType, postsAuditMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(postsAuditType, postsAuditMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"posts_audit\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"posts_audit\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into posts_audit")
	}

	if !cached {
		postsAuditInsertCacheMut.Lock()
		postsAuditInsertCache[key] = cache
		postsAuditInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PostsAudit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PostsAudit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	postsAuditUpdateCacheMut.RLock()
	cache, cached := postsAuditUpdateCache[key]
	postsAuditUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			postsAuditAllColumns,
			postsAuditPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update posts_audit, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"posts_audit\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, postsAuditPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(postsAuditType, postsAuditMapping, append(wl, postsAuditPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update posts_audit row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for posts_audit")
	}

	if !cached {
		postsAuditUpdateCacheMut.Lock()
		postsAuditUpdateCache[key] = cache
		postsAuditUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q postsAuditQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for posts_audit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for posts_audit")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PostsAuditSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postsAuditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"posts_audit\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, postsAuditPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in postsAudit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all postsAudit")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PostsAudit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no posts_audit provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postsAuditColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	postsAuditUpsertCacheMut.RLock()
	cache, cached := postsAuditUpsertCache[key]
	postsAuditUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			postsAuditAllColumns,
			postsAuditColumnsWithDefault,
			postsAuditColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			postsAuditAllColumns,
			postsAuditPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert posts_audit, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(postsAuditPrimaryKeyColumns))
			copy(conflict, postsAuditPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"posts_audit\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(postsAuditType, postsAuditMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(postsAuditType, postsAuditMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert posts_audit")
	}

	if !cached {
		postsAuditUpsertCacheMut.Lock()
		postsAuditUpsertCache[key] = cache
		postsAuditUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PostsAudit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PostsAudit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PostsAudit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), postsAuditPrimaryKeyMapping)
	sql := "DELETE FROM \"posts_audit\" WHERE \"id\"=$1 AND \"user_id\"=$2 AND \"contributed_at\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from posts_audit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for posts_audit")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q postsAuditQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no postsAuditQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from posts_audit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for posts_audit")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PostsAuditSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(postsAuditBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postsAuditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"posts_audit\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, postsAuditPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from postsAudit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for posts_audit")
	}

	if len(postsAuditAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PostsAudit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPostsAudit(ctx, exec, o.ID, o.UserID, o.ContributedAt)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PostsAuditSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PostsAuditSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postsAuditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"posts_audit\".* FROM \"posts_audit\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, postsAuditPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PostsAuditSlice")
	}

	*o = slice

	return nil
}

// PostsAuditExists checks if the PostsAudit row exists.
func PostsAuditExists(ctx context.Context, exec boil.ContextExecutor, iD int, userID int, contributedAt time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"posts_audit\" where \"id\"=$1 AND \"user_id\"=$2 AND \"contributed_at\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD, userID, contributedAt)
	}
	row := exec.QueryRowContext(ctx, sql, iD, userID, contributedAt)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if posts_audit exists")
	}

	return exists, nil
}
